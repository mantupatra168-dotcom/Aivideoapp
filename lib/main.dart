// Flutter single-file production-ready front-end (main.dart) // Usage instructions (Hindi): // 1) Put this file as lib/main.dart in a new Flutter project (Flutter 3.x+). // 2) Add following packages in pubspec.yaml under dependencies: //    http: ^0.13.5 //    flutter_dotenv: ^5.0.2 //    image_picker: ^0.8.7+4 //    file_picker: ^5.2.5 //    video_player: ^2.5.1 //    chewie: ^1.5.2 //    audioplayers: ^2.1.1 //    url_launcher: ^6.1.7 //    provider: ^6.0.5 //    fluttertoast: ^8.2.1 // 3) Create a .env file in project root with: //    API_BASE_URL=https://your-backend.example.com  # backend base URL //    PAYPAL_CLIENT_ID=... //    RAZORPAY_KEY_ID=... // 4) Run flutter pub get and then flutter run. // 5) This app assumes the backend exposes endpoints described in the backend (upload, preview_voice, generate_video, gallery, create_paypal_order, create_razorpay_order, verify_razorpay_payment, assistant).

import 'dart:convert'; import 'dart:io'; import 'package:flutter/material.dart'; import 'package:flutter_dotenv/flutter_dotenv.dart'; import 'package:http/http.dart' as http; import 'package:image_picker/image_picker.dart'; import 'package:file_picker/file_picker.dart'; import 'package:provider/provider.dart'; import 'package:video_player/video_player.dart'; import 'package:chewie/chewie.dart'; import 'package:audioplayers/audioplayers.dart'; import 'package:fluttertoast/fluttertoast.dart'; import 'package:url_launcher/url_launcher.dart';

void main() async { WidgetsFlutterBinding.ensureInitialized(); await dotenv.load(); runApp(MyApp()); }

class Config { static final apiBase = dotenv.env['API_BASE_URL'] ?? 'https://example.com'; }

class AppState extends ChangeNotifier { List<Map<String, dynamic>> gallery = []; bool loading = false;

void setLoading(bool v) { loading = v; notifyListeners(); } void setGallery(List<Map<String, dynamic>> g) { gallery = g; notifyListeners(); } }

class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return ChangeNotifierProvider( create: (_) => AppState(), child: MaterialApp( debugShowCheckedModeBanner: false, title: 'AiVantu Frontend', theme: ThemeData.dark().copyWith( colorScheme: ColorScheme.dark(primary: Colors.teal), scaffoldBackgroundColor: Color(0xFF0D0F14), ), home: HomePage(), ), ); } }

class HomePage extends StatefulWidget { @override _HomePageState createState() => _HomePageState(); }

class _HomePageState extends State<HomePage> { int _index = 0; final _pages = [HomeScreen(), ExploreScreen(), CreateScreen(), AssetsScreen(), ProfileScreen()];

@override Widget build(BuildContext context) { return Scaffold( body: _pages[_index], bottomNavigationBar: BottomNavigationBar( currentIndex: _index, onTap: (i) => setState(() => _index = i), items: [ BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'), BottomNavigationBarItem(icon: Icon(Icons.explore), label: 'Explore'), BottomNavigationBarItem(icon: Icon(Icons.add_circle_outline), label: 'Create'), BottomNavigationBarItem(icon: Icon(Icons.folder), label: 'Assets'), BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'), ], ), ); } }

// ---------- Home Screen ---------- class HomeScreen extends StatelessWidget { @override Widget build(BuildContext context) { return SafeArea( child: SingleChildScrollView( padding: EdgeInsets.all(16), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ IconButton(icon: Icon(Icons.menu), onPressed: () => Scaffold.of(context).openDrawer()), Row(children: [ ElevatedButton.icon(onPressed: () => openUpgrade(context), icon: Icon(Icons.card_giftcard), label: Text('Referral Bonus')), SizedBox(width:8), OutlinedButton(onPressed: () => openUpgrade(context), child: Text('Upgrade')) ]) ]), SizedBox(height:12), Container( height:160, decoration: BoxDecoration(borderRadius: BorderRadius.circular(12), color: Colors.grey[850]), child: Stack(children:[ Positioned.fill(child: ClipRRect(borderRadius: BorderRadius.circular(12), child: Image.asset('assets/banner.jpg', fit: BoxFit.cover))), Positioned(left:16, bottom:16, child: Column(crossAxisAlignment: CrossAxisAlignment.start, children:[ Text('Kling Shorts Contest #9', style: TextStyle(fontSize:18, fontWeight: FontWeight.bold, color: Colors.white)), Text('Design Sci-Fi Creatures with Kling AI!', style: TextStyle(color:Colors.white70)) ])) ]) ), SizedBox(height:16), Row(children:[ Expanded(child: ElevatedButton.icon(onPressed: () => Navigator.push(context, MaterialPageRoute(builder: () => CreateScreen(initialTab: 0))), icon: Icon(Icons.image), label: Text('Image Generation'))), SizedBox(width:12), Expanded(child: ElevatedButton.icon(onPressed: () => Navigator.push(context, MaterialPageRoute(builder: () => CreateScreen(initialTab: 1))), icon: Icon(Icons.video_library), label: Text('Video generation'))), ]), SizedBox(height:16), Text('Effects', style: TextStyle(fontSize:18, fontWeight: FontWeight.bold)), SizedBox(height:12), SizedBox( height:160, child: ListView(scrollDirection: Axis.horizontal, children: [ _effectCard('Guardian Spirit','assets/e1.jpg'), _effectCard('Earth Zoom In','assets/e2.jpg'), _effectCard('Inner Voice','assets/e3.jpg'), ]), ), SizedBox(height:20), Text('For You', style: TextStyle(fontSize:18, fontWeight: FontWeight.bold)), SizedBox(height:10), // small demo gallery Consumer<AppState>(builder:(context, st, _){ if (st.gallery.isEmpty) return Text('No videos yet', style: TextStyle(color:Colors.white54)); return Column(children: st.gallery.map((g)=>ListTile( leading: Icon(Icons.video_library), title: Text(g['title'] ?? 'Untitled'), subtitle: Text(g['status'] ?? 'ready'), trailing: IconButton(icon: Icon(Icons.play_arrow), onPressed: ()=>_openVideoPreview(context, g)), )).toList()); }) ], ), ), ); }

Widget _effectCard(String title, String asset){ return Container(width:140, margin: EdgeInsets.only(right:12), child: Column(children:[ Expanded(child: ClipRRect(borderRadius: BorderRadius.circular(12), child: Image.asset(asset, fit: BoxFit.cover))), SizedBox(height:6), Text(title, style: TextStyle(fontSize:14)) ])); }

void openUpgrade(BuildContext ctx){ Navigator.push(ctx, MaterialPageRoute(builder:()=>UpgradePage())); }

void openVideoPreview(BuildContext ctx, Map<String,dynamic> g){ Navigator.push(ctx, MaterialPageRoute(builder:()=>VideoPreviewPage(videoData: g))); } }

// ---------- Explore, Assets, Profile placeholders ---------- class ExploreScreen extends StatelessWidget { @override Widget build(BuildContext c) => Center(child: Text('Explore', style: TextStyle(fontSize:24))); } class AssetsScreen extends StatelessWidget { @override Widget build(BuildContext c) => Center(child: Text('Assets', style: TextStyle(fontSize:24))); }

class ProfileScreen extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( drawer: Drawer(child: _drawerContent(context)), appBar: AppBar(title: Text('Profile')), body: Center(child: Text('User Profile')), ); }

Widget drawerContent(BuildContext ctx){ return ListView(padding:EdgeInsets.zero, children:[ DrawerHeader(child:Column(crossAxisAlignment: CrossAxisAlignment.start, children:[ CircleAvatar(radius:28, child: Icon(Icons.person)), SizedBox(height:8), Text('kpNNShRE', style: TextStyle(fontSize:18)), Text('ID 39103605') ])), ListTile(leading:Icon(Icons.credit_card), title:Text('Credits Details'), trailing:Text('166.00')), ListTile(leading:Icon(Icons.upgrade), title:Text('Upgrade your plan'), onTap: ()=>Navigator.push(ctx, MaterialPageRoute(builder:()=>UpgradePage()))), ListTile(leading:Icon(Icons.message), title:Text('Messages'), trailing:CircleAvatar(radius:10, child:Text('9', style:TextStyle(fontSize:12)))), ListTile(leading:Icon(Icons.help), title:Text('Help Center')), ListTile(leading:Icon(Icons.logout), title:Text('Sign out'), onTap: ()=>Fluttertoast.showToast(msg:'Signed out (demo)')) ]); } }

// ---------- Create Screen: tabs for Image/Video, includes photo+voice upload ---------- class CreateScreen extends StatefulWidget { final int initialTab; CreateScreen({this.initialTab = 1}); @override _CreateScreenState createState() => _CreateScreenState(); }

class _CreateScreenState extends State<CreateScreen> { int tab = 1; // 0 image, 1 video File? pickedImage; File? pickedVoice; TextEditingController scriptCtrl = TextEditingController(); bool generating = false; String? generatedVideoUrl;

@override void initState(){ super.initState(); tab = widget.initialTab; }

@override Widget build(BuildContext ctx){ return Scaffold( appBar: AppBar(title: Text(tab==0? 'Create Image' : 'Create Video')), body: SingleChildScrollView(padding: EdgeInsets.all(12), child: Column(children:[ ToggleButtons(children:[Padding(padding:EdgeInsets.symmetric(horizontal:16),child:Text('Image')),Padding(padding:EdgeInsets.symmetric(horizontal:16),child:Text('Video'))], isSelected:[tab==0, tab==1], onPressed:(i)=>setState(()=>tab=i)), SizedBox(height:12), _filePickerTile('Upload Photo', Icons.photo, () async => await _pickImage()), SizedBox(height:8), _filePickerTile('Upload Voice (optional)', Icons.mic, () async => await _pickVoice()), SizedBox(height:12), TextField(controller: scriptCtrl, maxLines:6, decoration: InputDecoration(hintText:'Enter script (you can mark [C1]:, [C2]: for characters)', border: OutlineInputBorder())), SizedBox(height:12), Row(children:[Expanded(child: ElevatedButton(onPressed: generating?null: _onGenerate, child: generating?CircularProgressIndicator(color:Colors.white):Text('Generate')))]), SizedBox(height:12), if (generatedVideoUrl != null) ...[ Text('Generated video', style: TextStyle(fontWeight: FontWeight.bold)), VideoPlayerWidget(url: generatedVideoUrl!) ] ])), ); }

Widget _filePickerTile(String label, IconData icon, VoidCallback onTap){ String sub = (label=='Upload Photo' && pickedImage!=null) ? pickedImage!.path.split('/').last : (label=='Upload Voice (optional)' && pickedVoice!=null) ? pickedVoice!.path.split('/').last : ''; return ListTile(leading:Icon(icon), title:Text(label), subtitle: sub.isNotEmpty?Text(sub):null, trailing: IconButton(icon: Icon(Icons.upload_file), onPressed: onTap)); }

Future<void> _pickImage() async{ final picker = ImagePicker(); final XFile? img = await picker.pickImage(source: ImageSource.gallery, maxWidth:1280); if (img==null) return; setState(()=> pickedImage = File(img.path)); Fluttertoast.showToast(msg: 'Image selected'); }

Future<void> _pickVoice() async{ FilePickerResult? res = await FilePicker.platform.pickFiles(type: FileType.audio); if (res==null) return; setState(()=> pickedVoice = File(res.files.single.path!)); Fluttertoast.showToast(msg: 'Voice selected'); }

Future<void> onGenerate() async{ // Validate if (tab==1 && scriptCtrl.text.trim().isEmpty){ Fluttertoast.showToast(msg:'Script required for video'); return; } setState(()=> generating=true); try{ var uri = Uri.parse('${Config.apiBase}/generate_video'); var req = http.MultipartRequest('POST', uri); req.fields['user_email'] = 'demo@aivantu.com'; req.fields['title'] = 'MobileGen${DateTime.now().toIso8601String()}'; req.fields['script'] = scriptCtrl.text; req.fields['template'] = 'Cinematic'; // add files if (pickedImage!=null){ req.files.add(await http.MultipartFile.fromPath('characters', pickedImage!.path)); } if (pickedVoice!=null){ req.files.add(await http.MultipartFile.fromPath('character_voice_files', pickedVoice!.path)); } // send var streamed = await req.send(); var resp = await http.Response.fromStream(streamed); if (resp.statusCode>=200 && resp.statusCode<300){ var j = json.decode(resp.body); // backend returns download_url or outputs path String url = j['download_url'] ?? j['video_url'] ?? j['file_path'] ?? ''; if (url.isEmpty){ Fluttertoast.showToast(msg:'Generated but no url returned'); } else { setState(()=> generatedVideoUrl = url); Fluttertoast.showToast(msg:'Generated'); } // refresh gallery await _refreshGallery(); } else { Fluttertoast.showToast(msg:'Generation failed: ${resp.statusCode}'); } } catch(e){ Fluttertoast.showToast(msg:'Error: $e'); } setState(()=> generating=false); }

Future<void> _refreshGallery() async{ try{ var r = await http.get(Uri.parse('${Config.apiBase}/admin/status'));// example, change to /gallery if (r.statusCode==200){ // NOT actual gallery format - call /gallery in backend // using /gallery demo var gr = await http.get(Uri.parse('${Config.apiBase}/gallery/demo@aivantu.com')); if (gr.statusCode==200){ var list = json.decode(gr.body) as List; Provider.of<AppState>(context, listen:false).setGallery(List<Map<String,dynamic>>.from(list)); } } }catch(e){ } } }

// ---------- Video Preview Page ---------- class VideoPreviewPage extends StatefulWidget { final Map<String,dynamic> videoData; VideoPreviewPage({required this.videoData}); @override _VideoPreviewPageState createState()=> _VideoPreviewPageState(); } class _VideoPreviewPageState extends State<VideoPreviewPage>{ VideoPlayerController? _controller; ChewieController? _chewie; @override void initState(){ super.initState(); _init(); } void _init(){ String url = widget.videoData['download_url'] ?? widget.videoData['file'] ?? widget.videoData['file_path'] ?? ''; if (url.isNotEmpty){ controller = VideoPlayerController.network(url)..initialize().then((){ setState(()=> _chewie = ChewieController(videoPlayerController: _controller!, autoPlay:false, looping:false)); }); }} @override void dispose(){ _chewie?.dispose(); _controller?.dispose(); super.dispose(); } @override Widget build(BuildContext c){ return Scaffold(appBar: AppBar(title: Text(widget.videoData['title'] ?? 'Preview')), body: _chewie==null?Center(child:CircularProgressIndicator()):Chewie(controller: _chewie!)); } }

// ---------- Video Player Widget for generated URL ---------- class VideoPlayerWidget extends StatefulWidget { final String url; VideoPlayerWidget({required this.url}); @override _VideoPlayerWidgetState createState()=> _VideoPlayerWidgetState(); } class _VideoPlayerWidgetState extends State<VideoPlayerWidget>{ VideoPlayerController? _ctrl; ChewieController? _chewie; @override void initState(){ super.initState(); ctrl = VideoPlayerController.network(widget.url)..initialize().then((){ setState(()=> _chewie = ChewieController(videoPlayerController: _ctrl!, autoPlay:false)); }); } @override void dispose(){ _chewie?.dispose(); _ctrl?.dispose(); super.dispose(); } @override Widget build(BuildContext c) => _chewie==null?Container(height:200, child:Center(child:CircularProgressIndicator())):Chewie(controller:_chewie!); }

// ---------- Upgrade / Payment placeholders ---------- class UpgradePage extends StatelessWidget { @override Widget build(BuildContext c){ return Scaffold(appBar: AppBar(title: Text('Upgrade')), body: Padding(padding:EdgeInsets.all(16), child: Column(children:[ ListTile(title:Text('Premium'), subtitle:Text('₹499 - FullHD, 10 renders/day'), trailing: ElevatedButton(onPressed: ()=>_startRazor(c, 499), child: Text('Buy'))), ListTile(title:Text('Pro'), subtitle:Text('₹999 - 4K, unlimited'), trailing: ElevatedButton(onPressed: ()=>_startRazor(c, 999), child: Text('Buy'))), SizedBox(height:20), Text('PayPal / Razorpay flows will open web checkout using backend endpoints') ]))); }

void _startRazor(BuildContext ctx, double amount){ Fluttertoast.showToast(msg:'Starting Razorpay for ₹$amount - open web checkout (placeholder)'); } }

// ---------- Assistant chat (simple) ---------- class AssistantPage extends StatefulWidget { @override _AssistantPageState createState()=>_AssistantPageState(); } class _AssistantPageState extends State<AssistantPage>{ TextEditingController q = TextEditingController(); String? audioUrl; String? reply; @override Widget build(BuildContext c){ return Scaffold(appBar: AppBar(title:Text('Assistant')), body: Column(children:[ Expanded(child: reply==null?Center(child:Text('Ask for script help')):Padding(padding:EdgeInsets.all(12),child:Text(reply!))), if (audioUrl!=null) IconButton(icon:Icon(Icons.play_arrow), onPressed: ()=>AudioPlayer().play(UrlSource(audioUrl!))), Padding(padding:EdgeInsets.all(8), child:Row(children:[Expanded(child:TextField(controller:q)), IconButton(icon:Icon(Icons.send), onPressed:_ask)])) ])); } Future<void> _ask() async{ var res = await http.post(Uri.parse('${Config.apiBase}/assistant'), headers:{'Content-Type':'application/json'}, body:json.encode({'query':q.text,'lang':'hi'})); if (res.statusCode==200){ var j=json.decode(res.body); setState(()=> reply=j['reply'] ?? ''); audioUrl = j['audio_url']; } else Fluttertoast.showToast(msg:'Assistant failed'); } }

// ---------- Misc Helpers ---------- void openUrl(String url) async{ if (await canLaunch(url)) await launch(url); }

// End of file

